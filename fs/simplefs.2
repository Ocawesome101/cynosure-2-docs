\" This document is formatted with the GNU Roff formatting scheme.
\" Use "man -l simplefs.2" to view it.
.color
.defcolor r rgb #FF0000
.defcolor g rgb #00FF00
.defcolor m rgb #FF00FF
.ce
\fBSFS: The Simple File System\fR

.in 4
SFS is an extremely simple filesystem.  It is not intended to be fast or efficie
nt - only to be simple to implement.

.in 4
All numbers are little-endian.

.in 4
The first sector of a SFS-formatted disk contains the superblock.  This contains
 a little bit of data about the filesystem.

.in 6
\fB\mrstruct\m[default] Superblock \mg{
.in 8
\mrchar \m[default]signature[4] = \mr"\\x1bSFS"\m[default];
.in 8
\mrchar \m[default]flags;
.in 8
\mrchar \m[default]revision;
.in 8
\mruint16_t \m[default]namelist_blocks;
.in 8
\mruint16_t \m[default]blocksize;
.in 8
\mruint24_t \m[default]blocks;
.in 8
\mruint24_t \m[default]blocks_used;
.in 8
\mrchar \m[default]label[19];
.in 6
\mg}\m[default]\fR

.in 4
The following file system flags should have an effect:
.in 6
\fB\mm0x1\m[default]\fR - File system was not cleanly unmounted, so run a filesy
stem check
.in 6
\fB\mm0x2\m[default]\fR - File system is read-only

.in 4
The revision flag indicates the filesystem revision.  This may subtly affect beh
avior.  This document outlines revision 0.

.in 4
Immediately following the superblock is the Blockmap.  This is an array of bits 
specifying what blocks have been used and what blocks are not used.  It occupies
 an entire block to allow room for expansion if necessary.

.in 4
SFS represents all its file data in a \fBNamelist\fR, which immediately follows 
the Blockmap.  It is a preallocated space \fBSuperblock.namelist_size\fR blocks 
long and contains entries in the following format:

.in 6
\fB\mrstruct \m[default]Namelist_entry \mg{
.in 8
\mruint16_t \m[default]flags;
.in 8
\mruint16_t \m[default]datablock;
.in 8
\mruint16_t \m[default]next_entry;
.in 8
\mruint16_t \m[default]last_entry;
.in 8
\mruint16_t \m[default]parent;
.in 8
\mruint32_t \m[default]size;
.in 8
\mruint64_t \m[default]created;
.in 8
\mruint64_t \m[default]modified;
.in 8
\mruint16_t \m[default]uid;
.in 8
\mruint16_t \m[default]gid;
.in 8
\mrchar \m[default]fname[\mm64\m[default]];
.in 6
\mg}\m[default]\fR

.in 4
Namelist entry flags are exactly the same as the standard POSIX file flags.  If 
they are empty, the namelist entry is invalid and should be ignored.  The first 
namelist entry is always the root directory and its fname is always ignored.

.in 4
The \fBdatablock\fR pointer points to the block at which the file data begins.  
If the entry is a directory, this is actually a pointer to the first file in the
 directory.  If the entry is a symbolic link, this data block stores the path to
 which the link points.  If the entry is a character or block device, this store
s its major and minor device numbers.  If the value is zero, then the entry is e
mpty and only exists in the Namelist.  This is only really valid for directories
 and drivers are advised to warn if it occurs in other file types.

.in 4
The \fBsize\fR field stores total file size in bytes.

.in 4
Directory listings are doubly linked lists.  The \fBnext_entry\fR field marks th
e next file entry in the Namelist in that listing of directories.  A value of ze
ro indicates the end of the directory listing.  The \fBprevious_entry\fR field m
arks the previous file entry in the Namelist, and a value of zero indicates the 
first entry in that listing.  The \fBparent\fR field indicates the parent direct
ory's index in the Namelist.

.in 4
Since the \fBNamelist_entry\fR structure is \fB\mm128\m[default]\fR bytes long, 
finding a file at an index in the Namelist is simple: multiply its index by \fB\
mm128\m[default]\fR and read the \fB\mm128\m[default]\fR bytes at that offset.

.in 4
This is a fairly slow implementation of a file tree, and driver authors will pro
bably want to cache as much of this tree as possible for speed reasons.

.in 4
When the Namelist is full, no more files can be allocated.

.in 4
A 4KB Namelist holds 32 files.  A 64KB Namelist holds 512 files.

.in 4
Each file datablock holds (Superblock.blocksize - 3) bytes of data followed by a
 pointer to the next block.  If this pointer has a value of zero, that is the en
d of the file data.


.in 4
The following are some suggested disk layouts for certain disk sizes:
.in 6
512 KB total (OpenComputers floppy disk):
.in 8
1 KB blocks
.in 8
64 KB Namelist (512 files)
.in 8
64-byte Blockmap (512 blocks)
.in 8
Total overhead 64*1025=65600 bytes
  
.in 6
1 MB total (OpenComputers T1 hard disk):
.in 8
1 KB blocks
.in 8
128 KB Namelist (1024 files)
.in 8
128-byte Blockmap (1024 blocks)
.in 8
Total overhead 128*1025=131200 bytes
  
.in 6
2 MB total (OpenComputers T2 hard disk):
.in 8
1 KB blocks
.in 8
256 KB Namelist (2048 files)
.in 8
256-byte Blockmap (2048 blocks)
.in 8
Total overhead 256*1025=262400 bytes
  
.in 6
4 MB total (OpenComputers T3 hard disk):
.in 8
1 KB blocks
.in 8
512 KB Namelist (4096 files)
.in 8
512-byte Blockmap (4096 blocks)
.in 8
Total overhead 512*1025=524800 bytes
  
.in 6
16 MB total:
.in 8
1 KB blocks
.in 8
1 MB Namelist (8192 files)
.in 8
2 KB Blockmap (16384 blocks)
.in 8
Total overhead 1024*1024+2048=1050624 bytes
  
.in 6
64 MB total (maximum size with 1KB blocks):
.in 8
1 KB blocks
.in 8
2 MB Namelist (16384 files)
.in 8
8 KB Blockmap (65536 blocks)
.in 8
Total overhead 2MB+8KB
  
.in 6
128 MB total (maximum size with 2KB blocks):
.in 8
2 KB blocks
.in 8
4 MB Namelist (32768 files)
.in 8
16 KB Blockmap (131072 blocks)
.in 8
Total overhead 4MB+16KB
.in 4
