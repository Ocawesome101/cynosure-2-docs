.color
.defcolor r rgb #FF0000
.defcolor g rgb #00FF00
.defcolor b rgb #0000FF
.defcolor m rgb #FF00FF
.defcolor w rgb #FFFFFF
.ce
\fBSystem Calls\fR

.in 4
This document describes all of Cynosure 2's system calls and their functions.


.in 4
\fB\mbopen\mw\fR(\fBurl\fR:\fB\mrstring\mw\fR,
\fBmode\fR:\fB\mmnumber\mw\fR): \fBfd\fR:\fB\mmnumber\mw\fR
.in 6
Tries to open the provided URL.  On success, returns a file descriptor.  The \fBmode\fR argument should be an OR of the following values for specifying how to open the file:

.in 10
\fBMODE_RDONLY\fR = \fB\mm0x2000\mw
.br
MODE_WRONLY\fR = \fB\mm0x1000\mw
.br
MODE_RDWR\fR   = \fB\mm0x800\mw
.br
MODE_APPEND\fR = \fB\mm0x400\mw
.br
MODE_CREAT\fR  = \fB\mm0x200\mw\fR

.in 6
and the following arguments for file permissions if \fBMODE_CREAT\fR is set:

.in 10
\fBPERM_UR\fR = \fB\mm0x100\mw
.br
PERM_UW\fR = \fB\mm0x80\mw
.br
PERM_UX\fR = \fB\mm0x40\mw
.br
PERM_GR\fR = \fB\mm0x20\mw
.br
PERM_GW\fR = \fB\mm0x10\mw
.br
PERM_GX\fR = \fB\mm0x8\mw
.br
PERM_OR\fR = \fB\mm0x4\mw
.br
PERM_OW\fR = \fB\mm0x2\mw
.br
PERM_OX\fR = \fB\mm0x1\mw\fR

.in 4
\fB\mbopendir\mw\fR(\fBurl\fR:\fB\mrstring\mw\fR):
\fBdirfd\fR:\fB\mmnumber\mw\fR
.in 6
Opens a directory for reading.  Use \fB\mbreaddir\mw\fR to read file names from this descriptor and \fB\mbclose\mw\fR to close it.

.in 4
\fB\mbread\mw\fR(\fBfd\fR:\fB\mmnumber\mw\fR, \fBn\fR:\fB\mmnumber\mw\fR):
\fBdata\fR:\fB\mrstring\mw\fR
.in 6
Reads up to \fB\mmn\mw\fR bytes of data from the given file descriptor.

.in 4
\fB\mbreaddir\mw\fB(\fBdirfd\fR:\fB\mmnumber\mw\fR):
\fBdirent\fR:\fB\mgtable\mw\fR
.in 6
Reads a directory entry from a directory descriptor and returns:

.in 10
\fB\mg{\mw
.in 12
inode = \mmnumber\mw,
.in 12
name = \mrstring
.in 10
\mg}\mw\fR

.in 4
\fB\mbwrite\mw\fR(\fBfd\fR:\fB\mmnumber\mw\fR, \fBdata\fR:\fB\mrstring\mw\fR)
.in 6
Writes the provided data to the given file descriptor.

.in 4
seek(fd:number, whence:string, offset:number]): offset:number
.in 6
Changes the read/write offset for the provided file descriptor.  Returns the new offset.

.in 4
close(fd:number)
.in 6
Closes an open file descriptor.

.in 4
invoke(fd:number, method:string, ...): ...
.in 6
Makes a component call using the specified file descriptor.  Otherwise this behaves exactly like the component.invoke function.


.in 4
fork(): pid:number
.in 6
A rather fragile system call.  "Forks" the current process;  the spawned child process will only execute code until the end of the block from which fork() is called.  This fork() requires direct access to the code from which it is called, and therefore must be called from code stored in and executed from a file.  Because of this, it will not work from code that has been loaded with load(), unless the chunk name is correct.  fork() returns the PID of the child process to the parent process, 0 to the child process, and nil with an error message if it fails.

.in 4
execve(file:string, args:table[, env:table])
.in 6
Replaces the current process's coroutine with the result of loading the file argument.  Will pass the provided args and set the environment to env.
